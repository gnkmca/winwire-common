package com.winwire.adobe.jdbc

import com.winwire.adobe.jdbc.JdbcConnector.ConnectionManager
import org.scalatest.{BeforeAndAfterAll, FlatSpec, Matchers}

abstract class JdbcTestConfig extends FlatSpec with Matchers with BeforeAndAfterAll {
  val DB = "testdb"
  val CONNECTION_CONFIG: Map[String, String] = Map[String, String](
    s"$DB.driver" -> "org.h2.Driver",
    s"$DB.url" -> s"jdbc:h2:mem:$DB;DATABASE_TO_UPPER=FALSE",
    s"$DB.username" -> "",
    s"$DB.password" -> "")
  val connectionDetails: ConnectionDetails = ConnectionDetails(DB, CONNECTION_CONFIG)

  var connectionManager: ConnectionManager = _

  override protected def beforeAll(): Unit = {
    connectionManager = ConnectionManager(Set(connectionDetails))

    connectionManager.withConnectionTo(connectionDetails)
      .sqlUpdate(s"CREATE SCHEMA IF NOT EXISTS $DB", returnAutoGeneratedKey = false)
  }

  override protected def afterAll(): Unit = {
    connectionManager.close()
  }
}
