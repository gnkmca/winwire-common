package com.winwire.adobe.jdbc

import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class JdbcConnectorTest extends JdbcTestConfig {
  behavior of JdbcConnector.getClass.getSimpleName

  val tableName = "coffees"

  it should "be valid" in {
    val connection = connectionManager.getConnectionTo(connectionDetails)

    connection.isValid(20)
  }

  it should "execute create statement" in {
    val affectedRows = connectionManager.withConnectionTo(connectionDetails)
      .sqlUpdate(
        s"""CREATE TABLE $DB.$tableName (
           |id INT IDENTITY,
           |name VARCHAR(50) not null,
           |sales INT not null,
           |price DOUBLE not null)""".stripMargin, returnAutoGeneratedKey = false)

    affectedRows.getOrElse(-1) shouldBe 0
  }

  it should "execute insert statement" in {
    val generatedId = connectionManager.withConnectionTo(connectionDetails)
      .sqlUpdate(
        s"INSERT INTO $DB.$tableName (name, sales, price) VALUES('Colombian', 12, 3.0)", returnAutoGeneratedKey = true)

    generatedId.getOrElse(-1) shouldBe 1
  }

  it should "execute select statement" in {
    val coffeeName = connectionManager.withConnectionTo(connectionDetails)
      .sql(s"SELECT name FROM $DB.$tableName WHERE id = 1")(rs => rs.getString("name"))
      .head

    coffeeName shouldBe "Colombian"
  }

  it should "execute delete statement" in {
    val deletedRows = connectionManager.withConnectionTo(connectionDetails)
      .sqlUpdate(s"DELETE FROM $DB.$tableName WHERE id = 1", returnAutoGeneratedKey = false)

    deletedRows.getOrElse(-1) shouldBe 1
  }
}
